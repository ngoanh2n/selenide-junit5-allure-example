/**
 * Author: ngoanh2n
 */
group(property("prj.groupId"))
version(property("prj.version"))

buildscript {
    apply {
        from(file("gradle/helpers.gradle"))
        from(file("gradle/versions.gradle"))
    }

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

apply plugin: "java"
apply plugin: "idea"                // Optional using for IntelliJ IDEA
apply plugin: "eclipse"             // Optional using for Eclipse
apply plugin: "io.qameta.allure"

apply { from(config.compilation) }

/*
* Define extra properties for the project object - project.ext
*/
ext {
    VERSION_SELENIDE = "6.10.2"
    VERSION_APPIUM = "8.3.0"
    VERSION_ALLURE = "2.20.1"
    VERSION_JUNIT5_JUPITER = "5.9.1"
    VERSION_JUNIT5_PLATFORM = "1.9.1"
    VERSION_SLF4J = "2.0.5"
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    /*
    * Selenium/Selenide
    */
    // https://mvnrepository.com/artifact/com.codeborne/selenide
    implementation("com.codeborne:selenide:${VERSION_SELENIDE}")

    // https://mvnrepository.com/artifact/io.appium/java-client
    implementation("io.appium:java-client:${VERSION_APPIUM}")

    /*
    * Allure
    */
    // https://mvnrepository.com/artifact/io.qameta.allure/allure-junit5
    testImplementation("io.qameta.allure:allure-junit5:${VERSION_ALLURE}")

    // https://mvnrepository.com/artifact/io.qameta.allure/allure-selenide
    testImplementation("io.qameta.allure:allure-selenide:${VERSION_ALLURE}")

    // https://mvnrepository.com/artifact/com.github.automatedowl/allure-environment-writer
    implementation("com.github.automatedowl:allure-environment-writer:1.0.0")

    /*
    * JUnit5 - Jupiter: API, Engine, Params
    */
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation("org.junit.jupiter:junit-jupiter:${VERSION_JUNIT5_JUPITER}")

    /*
    * JUnit5 - Vintage: Engine
    */
    // https://mvnrepository.com/artifact/org.junit.vintage/junit-vintage-engine
    testImplementation("org.junit.vintage:junit-vintage-engine:${VERSION_JUNIT5_JUPITER}")

    /*
    * JUnit5 - Platform: Runner
    * Enable use of the JUnitPlatform Runner within the IntelliJ
    */
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-runner
    testImplementation("org.junit.platform:junit-platform-runner:${VERSION_JUNIT5_PLATFORM}")

    /*
     * Logging
     */
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation("org.slf4j:slf4j-api:${VERSION_SLF4J}")

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12
    testImplementation("org.slf4j:slf4j-log4j12:${VERSION_SLF4J}")
}

/*
* Allure Configuration
*/
allure {
    version = VERSION_ALLURE
    aspectjweaver = true
    autoconfigure = false
    aspectjVersion = "1.9.1"
    useJUnit5 { version = VERSION_ALLURE }
}

test {
    /*
    * Enable JUnit Platform (JUnit 5) support, default is JUnit
    */
    useJUnitPlatform() {
        /*
        * Filter by engines
        */
        includeEngines "junit-jupiter"
        //excludeEngines "junit-vintage"

        /*
        * Filter by tags
        */
        //includeTags "fast", "smoke"
        //excludeTags "slow", "ci"
    }

    /*
    * Make failing tests do not fail the task
    */
    ignoreFailures = true

    /*
    * If any upToDateWhen spec returns false, the task is considered out of date.
    * If they return true, Gradle does the normal behavior of checking input/output files.
    */
    outputs.upToDateWhen { false }

    /*
    * To show standard out and standard error of the test JVM(s) on the console
    */
    testLogging.showStandardStreams = true

    /*
    *  Want to display the following test events
    */
    testLogging { events "passed", "skipped", "failed" }

    /*
    * When the JVM starts, it uses the JVMs platform encoding
    */
    systemProperty("file.encoding", "UTF-8")
}
